<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eebbk.internal.question.convertor.dao.mapper.QuestionMapper2" >
 
  <select id="selectQuestion" resultType="com.eebbk.internal.question.convertor.vo.QuestionsVo">
			SELECT
				a.id,
				a.title,
				a.option_a as optionA,
				a.option_b as optionB,
				a.option_c as optionC,
				a.option_d as optionD,
				a.option_e as optionE,
				a.answer1,
				a.answer2,
				a.parse,
				a.qtpye,
				b.gradeName,
				c.subjectName,
				d.format
			FROM
				questions a
			LEFT JOIN grade b ON a.gradeId = b.gradeId
			LEFT JOIN SUBJECT c ON a.subjectId = c.subjectId
			LEFT JOIN question_knowledge_basic_id_more d ON a.id = d.question_id
			order by a.id ASC
<!-- 		    WHERE -->
<!-- 		    a.id=17853566 -->
<!-- 		        a.subjectId=3        -->
<!-- 		AND a.title like concat('%','upimages','%') -->
<!-- 			LIMIT 0,1000 -->
  </select>
  <!--查询所有的非试卷题 -->
  <select id="selectQuestionPage" parameterType="java.lang.Integer" resultType="com.eebbk.internal.question.convertor.vo.QuestionsVo">
			SELECT
				a.id,
				a.title,
				a.option_a AS optionA,
				a.option_b AS optionB,
				a.option_c AS optionC,
				a.option_d AS optionD,
				a.option_e AS optionE,
				a.answer1,
				a.answer2,
				a.parse,
				a.qtpye,
				a.isNormal,
				a.isSub,
				b.gradeName,
				c.subjectName,
			    '0' AS paperFlag
			FROM
				(
					 SELECT
						d.id,
						d.title,
						d.option_a,
						d.option_b,
						d.option_c,
						d.option_d,
						d.option_e,
						d.answer1,
						d.answer2,
						d.parse,
						d.qtpye,
						d.isNormal,
						d.isSub,
						d.gradeId,
						d.subjectId
					FROM
						questions d
					WHERE
						NOT EXISTS(
								SELECT
									'1'
								FROM
									paperques e
								WHERE
									d.id = e.question_id
						)
				) a
			LEFT JOIN grade b ON a.gradeId = b.gradeId
			LEFT JOIN SUBJECT c ON a.subjectId = c.subjectId 
			ORDER BY
				a.id ASC			
		    limit  #{pageNum},#{pageSize}
  </select>
  
  <select id="selectQuestionPageByQueType" parameterType="java.lang.Integer" resultType="com.eebbk.internal.question.convertor.vo.QuestionsVo">
		SELECT
			a.id,
			a.title,
			a.option_a AS optionA,
			a.option_b AS optionB,
			a.option_c AS optionC,
			a.option_d AS optionD,
			a.option_e AS optionE,
			a.answer1,
			a.answer2,
			a.parse,
			a.qtpye,
			a.isNormal,
			a.isSub,
			b.gradeName,
			c.subjectName,
			'0' AS paperFlag
		FROM
			(
				SELECT DISTINCT
					d.id,
					d.title,
					d.option_a,
					d.option_b,
					d.option_c,
					d.option_d,
					d.option_e,
					d.answer1,
					d.answer2,
					d.parse,
					d.qtpye,
					d.isNormal,
					d.isSub,
					d.gradeId,
					d.subjectId
				FROM
					questions d,
					question_knowledge_basic_id_more d2
				WHERE
					d.id = d2.question_id
				AND d2.format = #{queType}
				AND NOT EXISTS (
					SELECT
						'1'
					FROM
						paperques e
					WHERE
						d.id = e.question_id
				)
			) a
		LEFT JOIN grade b ON a.gradeId = b.gradeId
		LEFT JOIN SUBJECT c ON a.subjectId = c.subjectId
		ORDER BY
			a.id ASC 
		limit  #{pageNum},#{pageSize}
  </select>
  <!--   试卷题selectQuestionPagePaper -->
  <select id="selectQuestionPagePaper" parameterType="java.lang.Integer" resultType="com.eebbk.internal.question.convertor.vo.QuestionsVo">
			SELECT
				a.id,
				a.title,
				a.option_a AS optionA,
				a.option_b AS optionB,
				a.option_c AS optionC,
				a.option_d AS optionD,
				a.option_e AS optionE,
				a.answer1,
				a.answer2,
				a.parse,
				a.qtpye,
				a.isNormal,
				a.isSub,
				b.gradeName,
				c.subjectName,
				'1' AS paperFlag
			FROM
				(
					SELECT
						d.id,
						d.title,
						d.option_a,
						d.option_b,
						d.option_c,
						d.option_d,
						d.option_e,
						d.answer1,
						d.answer2,
						d.parse,
						d.qtpye,
						d.isNormal,
						d.isSub,
						d.gradeId,
						d.subjectId
					FROM
						questions d
					WHERE
						  EXISTS (
							SELECT
								'1'
							FROM
								paperques e
							WHERE
								d.id = e.question_id
						)
				) a
			LEFT JOIN grade b ON a.gradeId = b.gradeId
			LEFT JOIN SUBJECT c ON a.subjectId = c.subjectId 
			ORDER BY
				a.id ASC
		    limit  #{pageNum},#{pageSize}
  </select>
  
  <select id="selectQuestionPageAll" parameterType="java.lang.Integer" resultType="com.eebbk.internal.question.convertor.vo.QuestionsVo">
			SELECT
				a.id,
				a.title,
				a.option_a AS optionA,
				a.option_b AS optionB,
				a.option_c AS optionC,
				a.option_d AS optionD,
				a.option_e AS optionE,
				a.answer1,
				a.answer2,
				a.parse,
				a.qtpye,
				a.isNormal,
				a.isSub,
				b.gradeName,
				c.subjectName
			FROM
				questions a
			LEFT JOIN grade b ON a.gradeId = b.gradeId
			LEFT JOIN SUBJECT c ON a.subjectId = c.subjectId 
			ORDER BY
				a.id ASC
		    limit  #{pageNum},#{pageSize}
  </select>
  
  <select id="selectQuesitonsListByIds" resultType="com.eebbk.internal.question.convertor.vo.QuestionsVo">
        SELECT
				a.id,
				a.title,
				a.option_a as optionA,
				a.option_b as optionB,
				a.option_c as optionC,
				a.option_d as optionD,
				a.option_e as optionE,
				a.answer1,
				a.answer2,
				a.parse,
				a.qtpye,
				a.isSub,
				a.isNormal,
				b.gradeName,
				c.subjectName
			FROM
				questions a
			LEFT JOIN grade b ON a.gradeId = b.gradeId
			LEFT JOIN SUBJECT c ON a.subjectId = c.subjectId
        	WHERE id in
	        <foreach collection="Ids" item="id" open="(" close=")" separator=",">
	            #{id}
	        </foreach>
			order by a.id ASC
		    limit  #{pageNum},#{pageSize}
  </select>
  
  <select id="selectQuesitonsNoUploadListByIds" resultType="com.eebbk.internal.question.convertor.vo.QuestionXuekubaoQueryVo">
        SELECT
				a.id,
				a.id_old as idOld,
				a.content,
				a.answer,
				a.solution,
				a.grade,
				a.course
			FROM
				t_question_bbk_originalpic a
        	WHERE id_old in
	        <foreach collection="Ids" item="id" open="(" close=")" separator=",">
	            #{id}
	        </foreach>
			order by a.id ASC
  </select>
  
  <select id="selectXuekubaoQuesitonsListByIds" resultType="com.eebbk.internal.question.convertor.vo.QuestionXuekubaoQueryVo">
        SELECT
				a.id_old AS idOld,
				a.content,
				a.answer,
				a.solution,
				a.course,
				a.grade
			FROM
				t_question_xuekebao a
        	WHERE id_old in
	        <foreach collection="Ids" item="id" open="(" close=")" separator=",">
	            #{id}
	        </foreach>
			order by a.id_old ASC
  </select>
  
  <select id="selectXuekubaoQuesitonsUnuploadPicListByIds" resultType="com.eebbk.internal.question.convertor.vo.QuestionXuekubaoQueryVo">
        SELECT
				a.id_old AS idOld,
				a.content,
				a.answer,
				a.solution,
				a.course,
				a.grade,
				a.pic_exist_flag AS picExistflag
			FROM
				t_question_bbk_originalpic a
        	WHERE id_old in
	        <foreach collection="Ids" item="id" open="(" close=")" separator=",">
	            #{id}
	        </foreach>
			order by a.id_old ASC
  </select>
  
  <select id="selectAllGrade" resultType="com.eebbk.internal.question.convertor.pojo.GradePojo">
  		SELECT 
  		    gradeId,gradeName
  		FROM 
  			grade
  </select>
  
  <select id="selectAllSubjectByGradeName" parameterType="java.lang.String" resultType="com.eebbk.internal.question.convertor.vo.GradeAndSubjectVo">
		SELECT DISTINCT
			b.gradeName,
			c.subjectName
		FROM
			questions a,
			grade b,
			SUBJECT c
		WHERE
			a.gradeId = b.gradeId
		AND a.subjectId = c.subjectId
		<if test="gradeName!=null">
			AND b.gradeName = #{gradeName}
		</if>
		ORDER BY
			b.gradeId
  </select>
  
  <select id="selectSubQuestionByQueId" parameterType="java.lang.Integer" resultType="com.eebbk.internal.question.convertor.vo.SubQuestionVo">
		SELECT
			a.id,
			a.title,
			a.option_a AS optionA,
			a.option_b AS optionB,
			a.option_c AS optionC,
			a.option_d AS optionD,
			a.answer1 AS answer1,
			a.answer2 AS answer2,
			a.parse AS parse
			
		FROM
			subquestions a
		WHERE a.pid=#{pid}
  </select>
  
  
  
  <select id="selectQuesitonIsExist" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT
			count(a.id_old) AS count
		FROM
			t_question_xuekebao a
		WHERE a.id_old=#{idOld}
  </select>
  
     <select id="selectXuebaoListPage"  resultType="com.eebbk.internal.question.convertor.vo.QuestionXuekubaoQueryVo">
   
   		select a.id,a.id_old as idOld,a.content,a.answer,a.solution,a.course,a.grade 
   		from t_question_xuekebao a
   		<where>
			<if test="id!=null">
				id = #{id}
			</if>
			<if test="idOld!=null">
				id_old = #{idOld}
			</if>
			<if test="grade!=null">
				and grade like concat('%',#{grade},'%')
				
			</if>
			<if test="course!=null">
				and course like concat('%',#{course},'%')
			</if>
			
		</where>	
		order by id desc
   
   </select>
  <insert id="insertQuestionXuekubao" parameterType="com.eebbk.internal.question.convertor.pojo.QuestionXuekubaoPojo" >
		INSERT INTO t_question_xuekebao (
			id_old,
			content,
			answer,
			solution,
			course,
			grade,
			pic_exist_flag,
			create_time
		)
		VALUES
			(
			    #{que.idOld},
				#{que.content},
				#{que.answer},
				#{que.solution},
				#{que.course},
				#{que.grade},
				#{que.picExistflag},
				#{que.createTime}
			)
		
		<selectKey keyColumn="id" keyProperty="que.id" order="AFTER" resultType="java.lang.Integer">
				SELECT LAST_INSERT_ID()
		</selectKey>	
  </insert>
   
<!-- 	t_question_xuekebao批量插入 -->
    <insert id="insertQuestionXuekubaoBatch" parameterType="com.eebbk.internal.question.convertor.pojo.QuestionXuekubaoPojo" keyProperty="id" useGeneratedKeys="true">
        replace into   t_question_xuekebao
            (id_old,content, answer, solution,course,grade,pic_exist_flag,content_exist_flag,answer_exist_flag,parse_exist_flag,
            qiniu_flag,paper_flag,url_img_flag,url_tikupic_flag,url_upimages_flag,url_upimg_flag,
            url_upload_flag,url_user_flag,url_zximages_flag,create_time)
        values
       	<foreach collection="list" item="item" index="index" separator=",">
            (#{item.idOld},#{item.content},#{item.answer},#{item.solution},#{item.course},#{item.grade},
            #{item.picExistflag},#{item.contentExistFlag},#{item.answerExistFlag},
            #{item.parseExistFlag},#{item.qiniuFlag},#{item.paperFlag},
            #{item.urlImgFlag},#{item.urlTikupicFlag},#{item.urlUpimagesFlag},#{item.urlUpimgFlag},
            #{item.urlUploadFlag},#{item.urlUserFlag},#{item.urlZximagesFlag},
            #{item.createTime})
        </foreach> 
    </insert>	
    
    <insert id="insertQuestionUnuploadBatch" parameterType="com.eebbk.internal.question.convertor.vo.QuestionXuekubaoQueryVo" keyProperty="id" useGeneratedKeys="true">
        replace into   t_question_bbk_originalpic_10w
            (id_old,content, answer, solution,course,grade)
        values
       	<foreach collection="list" item="item" index="index" separator=",">
            (#{item.idOld},#{item.content},#{item.answer},#{item.solution},#{item.course},#{item.grade})
        </foreach> 
    </insert>	
    
    <update id="updateQuestionXuekubaoBatch" parameterType="com.eebbk.internal.question.convertor.pojo.QuestionXuekubaoPojo" keyProperty="id" useGeneratedKeys="true">
		  <foreach collection="list" index="index" item="item" open="" separator=";" close="">
		    update t_question_xuekebao_paper_handler
		    <set>
		      content = #{item.content},
		      answer = #{item.answer},
		      solution = #{item.solution},
		      course = #{item.course},
		      grade = #{item.grade},
		      content_exist_flag = #{item.contentExistFlag},
		      answer_exist_flag = #{item.answerExistFlag},
		      content_exist_flag = #{item.contentExistFlag},
		      parse_exist_flag= #{item.parseExistFlag},
		      qiniu_flag= #{item.qiniuFlag},
		      paper_flag= #{item.paperFlag},
		      pic_exist_flag = #{item.picExistflag},
		      url_img_flag=#{item.urlImgFlag},
		      url_tikupic_flag=#{item.urlTikupicFlag},
		      url_upimages_flag=#{item.urlUpimagesFlag},
		      url_upimg_flag=#{item.urlUpimgFlag},
              url_upload_flag= #{item.urlUploadFlag},
              url_user_flag=#{item.urlUserFlag},
              url_zximages_flag=#{item.urlZximagesFlag},
		      update_time = #{item.createTime}
		    </set>
		    WHERE id_old = #{item.idOld}
		  </foreach>
	</update>
    
    <update id="updateQuestionXuekubaoPaperBatch" parameterType="com.eebbk.internal.question.convertor.pojo.QuestionXuekubaoPojo" keyProperty="id" useGeneratedKeys="true">
		  <foreach collection="list" index="index" item="item" open="" separator=";" close="">
		    update t_question_xuekebao_originalpic
		    <set>
		      content = #{item.content},
		      answer = #{item.answer},
		      solution = #{item.solution},
		      course = #{item.course},
		      grade = #{item.grade},
		      content_exist_flag = #{item.contentExistFlag},
		      answer_exist_flag = #{item.answerExistFlag},
		      content_exist_flag = #{item.contentExistFlag},
		      parse_exist_flag= #{item.parseExistFlag},
		      qiniu_flag= #{item.qiniuFlag},
		      paper_flag= #{item.paperFlag},
		      pic_exist_flag = #{item.picExistflag},
		      url_img_flag=#{item.urlImgFlag},
		      url_tikupic_flag=#{item.urlTikupicFlag},
		      url_upimages_flag=#{item.urlUpimagesFlag},
		      url_upimg_flag=#{item.urlUpimgFlag},
              url_upload_flag= #{item.urlUploadFlag},
              url_user_flag=#{item.urlUserFlag},
              url_zximages_flag=#{item.urlZximagesFlag},
		      update_time = #{item.createTime}
		    </set>
		    WHERE id_old = #{item.idOld}
		  </foreach>
	</update>
	
    <insert id="insertQuestionXuekubaoPaperBatch" parameterType="com.eebbk.internal.question.convertor.pojo.QuestionXuekubaoPojo" keyProperty="id" useGeneratedKeys="true">
        replace into t_question_xuekebao_originalpic
            (id_old,content, answer, solution,course,grade,pic_exist_flag,content_exist_flag,
            answer_exist_flag,parse_exist_flag,qiniu_flag,paper_flag,
            url_img_flag,url_tikupic_flag,url_upimages_flag,url_upimg_flag,
            url_upload_flag,url_user_flag,url_zximages_flag,
            create_time)
        values
       	<foreach collection="list" item="item" index="index" separator=",">
            (#{item.idOld},#{item.content},#{item.answer},#{item.solution},#{item.course},#{item.grade},#{item.picExistflag},#{item.contentExistFlag},#{item.answerExistFlag},#{item.parseExistFlag},#{item.qiniuFlag},
            #{item.paperFlag},
            #{item.urlImgFlag},#{item.urlTikupicFlag},#{item.urlUpimagesFlag},#{item.urlUpimgFlag},
            #{item.urlUploadFlag},#{item.urlUserFlag},#{item.urlZximagesFlag},
            #{item.createTime})
        </foreach> 
    </insert>	
    
   <update id="updateQuestionXuekubao" parameterType="com.eebbk.internal.question.convertor.pojo.QuestionXuekubaoPojo">
		update t_question_xuekebao  set 
		    content= #{que.content},
			answer = #{que.answer},
	        solution = #{que.solution},
	        course = #{que.course},
	        grade = #{que.grade},
	        pic_exist_flag=#{que.picExistflag},
	        content_exist_flag=#{que.contentExistFlag},
	        answer_exist_flag=#{que.answerExistFlag},
	        parse_exist_flag=#{que.parseExistFlag},
	        update_time = #{que.createTime}
        WHERE 
        	id_old = #{que.idOld}
	</update>
   <select id="getQuestionFileBysubject" resultType="com.eebbk.internal.question.convertor.vo.QuestionXuekubaoQueryVo">
   		SELECT
			a.id_old,
			a.course,
			a.content,
			a.answer,
			a.solution
		FROM
			t_question_xuekebao a
		GROUP BY
			a.course
	</select>
	
	<select id="getQueCountsBysubject" resultType="com.eebbk.internal.question.convertor.vo.DataCountsVo">
		SELECT
			a.course,
			count(id)
		FROM
			t_question_xuekebao a
		GROUP BY
			a.course
	</select>
	
	<select id="getQueCountsByGrade" resultType="com.eebbk.internal.question.convertor.vo.DataCountsVo">
		SELECT
			a.grade as fieldNameOne,
			count(id) as fieldCount
		FROM
			t_question_xuekebao a
		GROUP BY
			a.grade
	</select>
	
	<select id="getQueCountsByGradeAndSubject" resultType="com.eebbk.internal.question.convertor.vo.DataCountsVo">
		SELECT
			a.grade as fieldNameOne,
			a.course as fieldNameTwo,
			count(id) as fieldCount
		FROM
			t_question_xuekebao a
		GROUP BY
			a.grade,
			a.course
	</select>
	
	<select id="getQueCountsNoImg" resultType="com.eebbk.internal.question.convertor.vo.DataCountsVo">
		SELECT
			COUNT(pic_exist_flag) as fieldCount,
			a.pic_exist_flag as  fieldNameOne
		FROM
			t_question_xuekebao a
		GROUP BY
			a.pic_exist_flag
	</select>	
	
	<select id="getNoExistSituationByContent" resultType="com.eebbk.internal.question.convertor.vo.DataCountsVo">
		SELECT
			COUNT(id) as fieldCount,
			a.content_exist_flag as fieldNameOne
		FROM
			t_question_xuekebao a
		GROUP BY
			a.content_exist_flag
	</select>
	
	<select id="getNoExistSituationByAnswer" resultType="com.eebbk.internal.question.convertor.vo.DataCountsVo">
		SELECT
			COUNT(id) as fieldCount,
			a.answer_exist_flag as fieldNameOne
		FROM
			t_question_xuekebao a
		GROUP BY
			a.answer_exist_flag
	</select>	
	
	<select id="getNoExistSituationBySolution" resultType="com.eebbk.internal.question.convertor.vo.DataCountsVo">
		SELECT
			COUNT(id) as fieldCount,
			a.parse_exist_flag as fieldNameOne
		FROM
			t_question_xuekebao a
		GROUP BY
			a.parse_exist_flag	
	</select>
	
	<select id="getTotalQueCounts" resultType="java.lang.Integer">
		SELECT
			count(id) as count
		FROM
			t_question_xuekebao a
	</select>
	
</mapper>